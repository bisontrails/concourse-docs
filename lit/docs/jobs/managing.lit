\title{Managing Jobs}{managing-jobs}

\use-plugin{concourse-docs}

\section{
  \title{\code{fly jobs}}{fly-jobs}

  To list the jobs configured in a pipeline, run:

  \codeblock{bash}{{
  $ fly -t example jobs -p my-pipeline
  }}
}

\section{
  \title{\code{fly trigger-job}}{fly-trigger-job}

  To immediately queue a new build of a job, run:

  \codeblock{bash}{{
  $ fly -t example trigger-job --job my-pipeline/my-job
  }}

  This will enqueue a new build of the \code{my-job} job in the
  \code{my-pipeline} pipeline.

  To start watching the newly created build, append the \code{--watch} flag
  like so:

  \codeblock{bash}{{
  $ fly -t example trigger-job --job my-pipeline/my-job --watch
  }}

  You can also queue new builds by clicking the \code{+} button on the job or
  build pages in the web UI.
}

\section{
  \title{\code{fly rerun-build}}{fly-rerun-build}

  To queue a new build of a job with exactly the same inputs as a given build of
  the same job, run:

  \codeblock{bash}{{
  $ fly -t example rerun-build --job my-pipeline/my-job --build 4
  }}

  This will enqueue a new build of the \code{my-job} job in the
  \code{my-pipeline} pipeline, using the same input versions as build number 4.

  To start watching the newly created build, append the \code{--watch} flag
  like so:

  \codeblock{bash}{{
  $ fly -t example rerun-build --job my-pipeline/my-job --build 4 --watch
  }}

  You can also rerun builds by visiting the build page for the build in question
  in the web UI and clicking the rerun button.
}

\section{
  \title{\code{fly pause-job}}{fly-pause-job}

  To prevent scheduling and running builds of a job, run:

  \codeblock{bash}{{
  $ fly -t example pause-job --job my-pipeline/my-job
  }}

  This will prevent pending builds of the job from being scheduled, though
  builds that are in-flight will still run, and pending builds will still be
  created as normal.
}

\section{
  \title{\code{fly unpause-job}}{fly-unpause-job}

  To resume scheduling of a job, run:

  \codeblock{bash}{{
  $ fly -t example unpause-job --job my-pipeline/my-job
  }}

  This will resume scheduling of builds queued for the job.
}

\section{
  \title{\code{fly clear-task-cache}}{fly-clear-task-cache}

  If you've got a \reference{schema.task-config.caches}{task cache} that you need to
  clear out for whatever reason, this can be done like so:

  \codeblock{bash}{{
  $ fly -t example clear-task-cache --job my-pipeline/my-job --step my-step-name
  }}

  This will immediately invalidate the caches - they'll be garbage collected
  asynchronously and subsequent builds will run with empty caches.

  You can also clear out a particular path for the given step's cache, using
  \code{--cache-path}:

  \codeblock{bash}{{
  $ fly -t example clear-task-cache \\
      --job my-pipeline/my-job \\
      --step my-step-name \\
      --cache-path go/pkg
  }}

  If \code{--cache-path} is not specified, all caches for the given step will
  be cleared.
}
