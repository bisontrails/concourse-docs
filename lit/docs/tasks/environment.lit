\use-plugin{concourse-docs}

\title{Task runtime environment}{task-environment}

A task runs in a new container every time, using the image provided by
\reference{schema.task-config.image_resource} as its base filesystem (i.e. \code{/}).

The command specified by \reference{schema.task-config.run} will be executed in a working
directory containing each of the \reference{schema.task-config.inputs}. If any input is
missing, the task will not run (and the container will not even be created).

The working directory will also contain empty directories for each of the
\reference{schema.task-config.outputs}. The task must place artifacts in the output
directories for them to be exported. This meshes well with build tools with
configurable destination paths.

\aside{
  If your build tools don't support output paths, you can configure an input and
  output with the same path. The directory will be populated by the input, and
  any changes made to the directory will propagate downstream as an output.
}

Any \reference{schema.task.params} configured will be set in the environment for the
task's command, along with any environment variables provided by the task's
image (i.e. \code{ENV} rules from your \code{Dockerfile}).

The user the command runs as is determined by the image. If you're using a
Docker image, this will be the user set by a \code{USER} rule in your
\code{Dockerfile}, or \code{root}, if not specified.

Another relevant bit of configuration is \reference{schema.task.privileged},
which determines whether the user the task runs as will have full privileges
(primarily when running as \code{root}). This is intentionally \italic{not}
configurable by the task itself, to prevent privilege escalation by submitting
pull requests to repositories that contain task configs.

Putting all this together, the following task config:

\codeblock{yaml}{{
---
platform: linux

image_resource:
  type: registry-image
  source:
    repository: golang
    tag: '1.6'

params:
  SOME_PARAM: some-default-value

inputs:
- name: some-input
- name: some-input-with-custom-path
  path: some/custom/path

outputs:
- name: some-output

run:
  path: sh
  args:
  - -exc
  - |
    whoami
    env
    go version
    find .
    touch some-output/my-built-artifact
}}

...will produce the following output:

\codeblock{bash}{{
  + whoami
  root
  + env
  USER=root
  HOME=/root
  GOLANG_DOWNLOAD_SHA256=5470eac05d273c74ff8bac7bef5bad0b5abbd1c4052efbdbc8db45332e836b0b
  PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  GOPATH=/go
  PWD=/tmp/build/e55deab7
  GOLANG_DOWNLOAD_URL=https://golang.org/dl/go1.6.linux-amd64.tar.gz
  GOLANG_VERSION=1.6
  SOME_PARAM=some-default-value
  + go version
  go version go1.6 linux/amd64
  + find .
  .
  ./some-input
  ./some-input/foo
  ./some
  ./some/custom
  ./some/custom/path
  ./some/custom/path/bar
  ./some-output
  + touch some-output/my-built-artifact
}}

...and propagate \code{my-built-artifact} to any later \reference{task-step}s
or \reference{put-step}s that reference the \code{some-output} artifact, in
the same way that this task had \code{some-input} as an input.

